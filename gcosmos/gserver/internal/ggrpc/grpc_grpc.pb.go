// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: proto/gordian/server/v1/grpc.proto

package ggrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GordianGRPC_GetBlocksWatermark_FullMethodName  = "/gordian.server.v1.GordianGRPC/GetBlocksWatermark"
	GordianGRPC_GetValidators_FullMethodName       = "/gordian.server.v1.GordianGRPC/GetValidators"
	GordianGRPC_SubmitTransaction_FullMethodName   = "/gordian.server.v1.GordianGRPC/SubmitTransaction"
	GordianGRPC_SimulateTransaction_FullMethodName = "/gordian.server.v1.GordianGRPC/SimulateTransaction"
	GordianGRPC_PendingTransactions_FullMethodName = "/gordian.server.v1.GordianGRPC/PendingTransactions"
	GordianGRPC_QueryAccountBalance_FullMethodName = "/gordian.server.v1.GordianGRPC/QueryAccountBalance"
)

// GordianGRPCClient is the client API for GordianGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GordianGRPCClient interface {
	// GetBlocksWatermark returns the current block information.
	GetBlocksWatermark(ctx context.Context, in *CurrentBlockRequest, opts ...grpc.CallOption) (*CurrentBlockResponse, error)
	// GetValidators returns the validator set.
	GetValidators(ctx context.Context, in *GetValidatorsRequest, opts ...grpc.CallOption) (*GetValidatorsResponse, error)
	// (DEBUG) SubmitTransaction submits a transaction to the network.
	SubmitTransaction(ctx context.Context, in *SubmitTransactionRequest, opts ...grpc.CallOption) (*TxResultResponse, error)
	// (DEBUG) SimulateTransaction submits and simulates a transaction.
	SimulateTransaction(ctx context.Context, in *SubmitSimulationTransactionRequest, opts ...grpc.CallOption) (*TxResultResponse, error)
	// (DEBUG) PendingTransactions returns the pending transactions in JSON form.
	PendingTransactions(ctx context.Context, in *PendingTransactionsRequest, opts ...grpc.CallOption) (*PendingTransactionsResponse, error)
	// (DEBUG) QueryAccountBalance returns the balance of an account.
	QueryAccountBalance(ctx context.Context, in *QueryAccountBalanceRequest, opts ...grpc.CallOption) (*QueryAccountBalanceResponse, error)
}

type gordianGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewGordianGRPCClient(cc grpc.ClientConnInterface) GordianGRPCClient {
	return &gordianGRPCClient{cc}
}

func (c *gordianGRPCClient) GetBlocksWatermark(ctx context.Context, in *CurrentBlockRequest, opts ...grpc.CallOption) (*CurrentBlockResponse, error) {
	out := new(CurrentBlockResponse)
	err := c.cc.Invoke(ctx, GordianGRPC_GetBlocksWatermark_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gordianGRPCClient) GetValidators(ctx context.Context, in *GetValidatorsRequest, opts ...grpc.CallOption) (*GetValidatorsResponse, error) {
	out := new(GetValidatorsResponse)
	err := c.cc.Invoke(ctx, GordianGRPC_GetValidators_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gordianGRPCClient) SubmitTransaction(ctx context.Context, in *SubmitTransactionRequest, opts ...grpc.CallOption) (*TxResultResponse, error) {
	out := new(TxResultResponse)
	err := c.cc.Invoke(ctx, GordianGRPC_SubmitTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gordianGRPCClient) SimulateTransaction(ctx context.Context, in *SubmitSimulationTransactionRequest, opts ...grpc.CallOption) (*TxResultResponse, error) {
	out := new(TxResultResponse)
	err := c.cc.Invoke(ctx, GordianGRPC_SimulateTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gordianGRPCClient) PendingTransactions(ctx context.Context, in *PendingTransactionsRequest, opts ...grpc.CallOption) (*PendingTransactionsResponse, error) {
	out := new(PendingTransactionsResponse)
	err := c.cc.Invoke(ctx, GordianGRPC_PendingTransactions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gordianGRPCClient) QueryAccountBalance(ctx context.Context, in *QueryAccountBalanceRequest, opts ...grpc.CallOption) (*QueryAccountBalanceResponse, error) {
	out := new(QueryAccountBalanceResponse)
	err := c.cc.Invoke(ctx, GordianGRPC_QueryAccountBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GordianGRPCServer is the server API for GordianGRPC service.
// All implementations must embed UnimplementedGordianGRPCServer
// for forward compatibility
type GordianGRPCServer interface {
	// GetBlocksWatermark returns the current block information.
	GetBlocksWatermark(context.Context, *CurrentBlockRequest) (*CurrentBlockResponse, error)
	// GetValidators returns the validator set.
	GetValidators(context.Context, *GetValidatorsRequest) (*GetValidatorsResponse, error)
	// (DEBUG) SubmitTransaction submits a transaction to the network.
	SubmitTransaction(context.Context, *SubmitTransactionRequest) (*TxResultResponse, error)
	// (DEBUG) SimulateTransaction submits and simulates a transaction.
	SimulateTransaction(context.Context, *SubmitSimulationTransactionRequest) (*TxResultResponse, error)
	// (DEBUG) PendingTransactions returns the pending transactions in JSON form.
	PendingTransactions(context.Context, *PendingTransactionsRequest) (*PendingTransactionsResponse, error)
	// (DEBUG) QueryAccountBalance returns the balance of an account.
	QueryAccountBalance(context.Context, *QueryAccountBalanceRequest) (*QueryAccountBalanceResponse, error)
	mustEmbedUnimplementedGordianGRPCServer()
}

// UnimplementedGordianGRPCServer must be embedded to have forward compatible implementations.
type UnimplementedGordianGRPCServer struct {
}

func (UnimplementedGordianGRPCServer) GetBlocksWatermark(context.Context, *CurrentBlockRequest) (*CurrentBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlocksWatermark not implemented")
}
func (UnimplementedGordianGRPCServer) GetValidators(context.Context, *GetValidatorsRequest) (*GetValidatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidators not implemented")
}
func (UnimplementedGordianGRPCServer) SubmitTransaction(context.Context, *SubmitTransactionRequest) (*TxResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTransaction not implemented")
}
func (UnimplementedGordianGRPCServer) SimulateTransaction(context.Context, *SubmitSimulationTransactionRequest) (*TxResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimulateTransaction not implemented")
}
func (UnimplementedGordianGRPCServer) PendingTransactions(context.Context, *PendingTransactionsRequest) (*PendingTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingTransactions not implemented")
}
func (UnimplementedGordianGRPCServer) QueryAccountBalance(context.Context, *QueryAccountBalanceRequest) (*QueryAccountBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAccountBalance not implemented")
}
func (UnimplementedGordianGRPCServer) mustEmbedUnimplementedGordianGRPCServer() {}

// UnsafeGordianGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GordianGRPCServer will
// result in compilation errors.
type UnsafeGordianGRPCServer interface {
	mustEmbedUnimplementedGordianGRPCServer()
}

func RegisterGordianGRPCServer(s grpc.ServiceRegistrar, srv GordianGRPCServer) {
	s.RegisterService(&GordianGRPC_ServiceDesc, srv)
}

func _GordianGRPC_GetBlocksWatermark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrentBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GordianGRPCServer).GetBlocksWatermark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GordianGRPC_GetBlocksWatermark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GordianGRPCServer).GetBlocksWatermark(ctx, req.(*CurrentBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GordianGRPC_GetValidators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValidatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GordianGRPCServer).GetValidators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GordianGRPC_GetValidators_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GordianGRPCServer).GetValidators(ctx, req.(*GetValidatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GordianGRPC_SubmitTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GordianGRPCServer).SubmitTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GordianGRPC_SubmitTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GordianGRPCServer).SubmitTransaction(ctx, req.(*SubmitTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GordianGRPC_SimulateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitSimulationTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GordianGRPCServer).SimulateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GordianGRPC_SimulateTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GordianGRPCServer).SimulateTransaction(ctx, req.(*SubmitSimulationTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GordianGRPC_PendingTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PendingTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GordianGRPCServer).PendingTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GordianGRPC_PendingTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GordianGRPCServer).PendingTransactions(ctx, req.(*PendingTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GordianGRPC_QueryAccountBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAccountBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GordianGRPCServer).QueryAccountBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GordianGRPC_QueryAccountBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GordianGRPCServer).QueryAccountBalance(ctx, req.(*QueryAccountBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GordianGRPC_ServiceDesc is the grpc.ServiceDesc for GordianGRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GordianGRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gordian.server.v1.GordianGRPC",
	HandlerType: (*GordianGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlocksWatermark",
			Handler:    _GordianGRPC_GetBlocksWatermark_Handler,
		},
		{
			MethodName: "GetValidators",
			Handler:    _GordianGRPC_GetValidators_Handler,
		},
		{
			MethodName: "SubmitTransaction",
			Handler:    _GordianGRPC_SubmitTransaction_Handler,
		},
		{
			MethodName: "SimulateTransaction",
			Handler:    _GordianGRPC_SimulateTransaction_Handler,
		},
		{
			MethodName: "PendingTransactions",
			Handler:    _GordianGRPC_PendingTransactions_Handler,
		},
		{
			MethodName: "QueryAccountBalance",
			Handler:    _GordianGRPC_QueryAccountBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/gordian/server/v1/grpc.proto",
}

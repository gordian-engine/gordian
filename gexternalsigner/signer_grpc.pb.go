// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v4.24.4
// source: proto/rollchains/gordian/externalsigner/signer.proto

package gexternalsigner

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ExternalSigner_PubKey_FullMethodName    = "/rollchains.gordian.externalsigner.ExternalSigner/PubKey"
	ExternalSigner_Propose_FullMethodName   = "/rollchains.gordian.externalsigner.ExternalSigner/Propose"
	ExternalSigner_Prevote_FullMethodName   = "/rollchains.gordian.externalsigner.ExternalSigner/Prevote"
	ExternalSigner_Precommit_FullMethodName = "/rollchains.gordian.externalsigner.ExternalSigner/Precommit"
)

// ExternalSignerClient is the client API for ExternalSigner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExternalSignerClient interface {
	PubKey(ctx context.Context, in *PubKeyRequest, opts ...grpc.CallOption) (*PubKeyResponse, error)
	Propose(ctx context.Context, in *ProposeRequest, opts ...grpc.CallOption) (*SignResponse, error)
	Prevote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*SignResponse, error)
	Precommit(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*SignResponse, error)
}

type externalSignerClient struct {
	cc grpc.ClientConnInterface
}

func NewExternalSignerClient(cc grpc.ClientConnInterface) ExternalSignerClient {
	return &externalSignerClient{cc}
}

func (c *externalSignerClient) PubKey(ctx context.Context, in *PubKeyRequest, opts ...grpc.CallOption) (*PubKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PubKeyResponse)
	err := c.cc.Invoke(ctx, ExternalSigner_PubKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalSignerClient) Propose(ctx context.Context, in *ProposeRequest, opts ...grpc.CallOption) (*SignResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignResponse)
	err := c.cc.Invoke(ctx, ExternalSigner_Propose_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalSignerClient) Prevote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*SignResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignResponse)
	err := c.cc.Invoke(ctx, ExternalSigner_Prevote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalSignerClient) Precommit(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*SignResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignResponse)
	err := c.cc.Invoke(ctx, ExternalSigner_Precommit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExternalSignerServer is the server API for ExternalSigner service.
// All implementations must embed UnimplementedExternalSignerServer
// for forward compatibility
type ExternalSignerServer interface {
	PubKey(context.Context, *PubKeyRequest) (*PubKeyResponse, error)
	Propose(context.Context, *ProposeRequest) (*SignResponse, error)
	Prevote(context.Context, *VoteRequest) (*SignResponse, error)
	Precommit(context.Context, *VoteRequest) (*SignResponse, error)
	mustEmbedUnimplementedExternalSignerServer()
}

// UnimplementedExternalSignerServer must be embedded to have forward compatible implementations.
type UnimplementedExternalSignerServer struct {
}

func (UnimplementedExternalSignerServer) PubKey(context.Context, *PubKeyRequest) (*PubKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PubKey not implemented")
}
func (UnimplementedExternalSignerServer) Propose(context.Context, *ProposeRequest) (*SignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Propose not implemented")
}
func (UnimplementedExternalSignerServer) Prevote(context.Context, *VoteRequest) (*SignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prevote not implemented")
}
func (UnimplementedExternalSignerServer) Precommit(context.Context, *VoteRequest) (*SignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Precommit not implemented")
}
func (UnimplementedExternalSignerServer) mustEmbedUnimplementedExternalSignerServer() {}

// UnsafeExternalSignerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExternalSignerServer will
// result in compilation errors.
type UnsafeExternalSignerServer interface {
	mustEmbedUnimplementedExternalSignerServer()
}

func RegisterExternalSignerServer(s grpc.ServiceRegistrar, srv ExternalSignerServer) {
	s.RegisterService(&ExternalSigner_ServiceDesc, srv)
}

func _ExternalSigner_PubKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PubKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalSignerServer).PubKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalSigner_PubKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalSignerServer).PubKey(ctx, req.(*PubKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalSigner_Propose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalSignerServer).Propose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalSigner_Propose_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalSignerServer).Propose(ctx, req.(*ProposeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalSigner_Prevote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalSignerServer).Prevote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalSigner_Prevote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalSignerServer).Prevote(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalSigner_Precommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalSignerServer).Precommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalSigner_Precommit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalSignerServer).Precommit(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExternalSigner_ServiceDesc is the grpc.ServiceDesc for ExternalSigner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExternalSigner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rollchains.gordian.externalsigner.ExternalSigner",
	HandlerType: (*ExternalSignerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PubKey",
			Handler:    _ExternalSigner_PubKey_Handler,
		},
		{
			MethodName: "Propose",
			Handler:    _ExternalSigner_Propose_Handler,
		},
		{
			MethodName: "Prevote",
			Handler:    _ExternalSigner_Prevote_Handler,
		},
		{
			MethodName: "Precommit",
			Handler:    _ExternalSigner_Precommit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rollchains/gordian/externalsigner/signer.proto",
}
